{
	"info": {
		"_postman_id": "b06b37a3-095d-4bdc-beaa-3eded37ff577",
		"name": "Public SOAP APIs",
		"description": "This is a collection of different SOAP APIs that are completley public and do not require any authentication, making it easier for consumers to play with and understand what APIs are all about by seeing the many different ways in which APIs can be used.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25560373"
	},
	"item": [
		{
			"name": "Numbers",
			"item": [
				{
					"name": "NumberToWords",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <NumberToWords xmlns=\"http://www.dataaccess.com/webservicesserver/\">\n      <ubiNum>500</ubiNum>\n    </NumberToWords>\n  </soap:Body>\n</soap:Envelope>"
						},
						"url": {
							"raw": "https://www.dataaccess.com/webservicesserver/NumberConversion.wso",
							"protocol": "https",
							"host": [
								"www",
								"dataaccess",
								"com"
							],
							"path": [
								"webservicesserver",
								"NumberConversion.wso"
							]
						},
						"description": "Returns the word corresponding to the positive number passed as parameter. Limited to quadrillions."
					},
					"response": []
				},
				{
					"name": "NumberToDollars",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <NumberToDollars xmlns=\"http://www.dataaccess.com/webservicesserver/\">\n      <dNum>500</dNum>\n    </NumberToDollars>\n  </soap:Body>\n</soap:Envelope>"
						},
						"url": {
							"raw": "https://www.dataaccess.com/webservicesserver/NumberConversion.wso",
							"protocol": "https",
							"host": [
								"www",
								"dataaccess",
								"com"
							],
							"path": [
								"webservicesserver",
								"NumberConversion.wso"
							]
						},
						"description": "Returns the non-zero dollar amount of the passed number."
					},
					"response": []
				}
			],
			"description": "Some basic numbers requests."
		},
		{
			"name": "Calculator",
			"item": [
				{
					"name": "Add",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <NumberToWords xmlns=\"http://www.dataaccess.com/webservicesserver/\">\n      <ubiNum>500</ubiNum>\n    </NumberToWords>\n  </soap:Body>\n</soap:Envelope>"
						},
						"url": {
							"raw": "https://www.dataaccess.com/webservicesserver/NumberConversion.wso",
							"protocol": "https",
							"host": [
								"www",
								"dataaccess",
								"com"
							],
							"path": [
								"webservicesserver",
								"NumberConversion.wso"
							]
						},
						"description": "Adds two integers."
					},
					"response": []
				},
				{
					"name": "NumberToDollars",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <NumberToDollars xmlns=\"http://www.dataaccess.com/webservicesserver/\">\n      <dNum>500</dNum>\n    </NumberToDollars>\n  </soap:Body>\n</soap:Envelope>"
						},
						"url": {
							"raw": "https://www.dataaccess.com/webservicesserver/NumberConversion.wso",
							"protocol": "https",
							"host": [
								"www",
								"dataaccess",
								"com"
							],
							"path": [
								"webservicesserver",
								"NumberConversion.wso"
							]
						},
						"description": "Returns the non-zero dollar amount of the passed number."
					},
					"response": []
				},
				{
					"name": "Divide",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "http://tempuri.org/Divide",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <Divide xmlns=\"http://tempuri.org/\">\n      <intA>5</intA>\n      <intB>5</intB>\n    </Divide>\n  </soap:Body>\n</soap:Envelope>"
						},
						"url": {
							"raw": "http://www.dneonline.com/calculator.asmx",
							"protocol": "http",
							"host": [
								"www",
								"dneonline",
								"com"
							],
							"path": [
								"calculator.asmx"
							]
						},
						"description": "Divides two integers."
					},
					"response": []
				},
				{
					"name": "Multiply",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "http://tempuri.org/Multiply",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <Multiply xmlns=\"http://tempuri.org/\">\n      <intA>5</intA>\n      <intB>5</intB>\n    </Multiply>\n  </soap:Body>\n</soap:Envelope>"
						},
						"url": {
							"raw": "http://www.dneonline.com/calculator.asmx",
							"protocol": "http",
							"host": [
								"www",
								"dneonline",
								"com"
							],
							"path": [
								"calculator.asmx"
							]
						},
						"description": "Multiplies two integers."
					},
					"response": []
				},
				{
					"name": "Subtract",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "http://tempuri.org/Subtract",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <Subtract xmlns=\"http://tempuri.org/\">\n      <intA>5</intA>\n      <intB>5</intB>\n    </Subtract>\n  </soap:Body>\n</soap:Envelope>"
						},
						"url": {
							"raw": "http://www.dneonline.com/calculator.asmx",
							"protocol": "http",
							"host": [
								"www",
								"dneonline",
								"com"
							],
							"path": [
								"calculator.asmx"
							]
						},
						"description": "Subtracts two integers."
					},
					"response": []
				}
			],
			"description": "A simple SOAP API calculator.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Continents",
			"item": [
				{
					"name": "List of Continents by Name",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <ListOfContinentsByName xmlns=\"http://www.oorsprong.org/websamples.countryinfo\">\n    </ListOfContinentsByName>\n  </soap12:Body>\n</soap12:Envelope>"
						},
						"url": {
							"raw": "http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso",
							"protocol": "http",
							"host": [
								"webservices",
								"oorsprong",
								"org"
							],
							"path": [
								"websamples.countryinfo",
								"CountryInfoService.wso"
							]
						},
						"description": "Returns a list of continents ordered by name."
					},
					"response": []
				}
			],
			"description": "Some weather APIs for the United States.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Countries",
			"item": [
				{
					"name": "List of Countries by Name",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <ListOfCountryNamesByName xmlns=\"http://www.oorsprong.org/websamples.countryinfo\">\n    </ListOfCountryNamesByName>\n  </soap12:Body>\n</soap12:Envelope>"
						},
						"url": {
							"raw": "http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso",
							"protocol": "http",
							"host": [
								"webservices",
								"oorsprong",
								"org"
							],
							"path": [
								"websamples.countryinfo",
								"CountryInfoService.wso"
							]
						},
						"description": "Returns a list of countries ordered by name."
					},
					"response": []
				},
				{
					"name": "Captial City for a Country",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <CapitalCity xmlns=\"http://www.oorsprong.org/websamples.countryinfo\">\n      <sCountryISOCode>US</sCountryISOCode>\n    </CapitalCity>\n  </soap:Body>\n</soap:Envelope>"
						},
						"url": {
							"raw": "http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso",
							"protocol": "http",
							"host": [
								"webservices",
								"oorsprong",
								"org"
							],
							"path": [
								"websamples.countryinfo",
								"CountryInfoService.wso"
							]
						},
						"description": "Returns the name of the captial city for the passed country code."
					},
					"response": []
				},
				{
					"name": "Currency for a Country",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <CountryCurrency xmlns=\"http://www.oorsprong.org/websamples.countryinfo\">\n      <sCountryISOCode>US</sCountryISOCode>\n    </CountryCurrency>\n  </soap:Body>\n</soap:Envelope>"
						},
						"url": {
							"raw": "http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso",
							"protocol": "http",
							"host": [
								"webservices",
								"oorsprong",
								"org"
							],
							"path": [
								"websamples.countryinfo",
								"CountryInfoService.wso"
							]
						},
						"description": "Returns the currency ISO code and name for the passed country ISO code."
					},
					"response": []
				},
				{
					"name": "Flag for a Country",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <CountryFlag xmlns=\"http://www.oorsprong.org/websamples.countryinfo\">\n      <sCountryISOCode>US</sCountryISOCode>\n    </CountryFlag>\n  </soap:Body>\n</soap:Envelope>"
						},
						"url": {
							"raw": "http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso",
							"protocol": "http",
							"host": [
								"webservices",
								"oorsprong",
								"org"
							],
							"path": [
								"websamples.countryinfo",
								"CountryInfoService.wso"
							]
						},
						"description": "Returns a link to a picture of the country flag"
					},
					"response": []
				},
				{
					"name": "International Phone Code for a Country Copy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <CountryIntPhoneCode xmlns=\"http://www.oorsprong.org/websamples.countryinfo\">\n      <sCountryISOCode>US</sCountryISOCode>\n    </CountryIntPhoneCode>\n  </soap:Body>\n</soap:Envelope>"
						},
						"url": {
							"raw": "http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso",
							"protocol": "http",
							"host": [
								"webservices",
								"oorsprong",
								"org"
							],
							"path": [
								"websamples.countryinfo",
								"CountryInfoService.wso"
							]
						},
						"description": "Returns the internation phone code for the passed ISO country code."
					},
					"response": []
				}
			],
			"description": "Country SOAP APIs.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Currencies",
			"item": [
				{
					"name": "List of Currencies by Name",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <ListOfCurrenciesByName xmlns=\"http://www.oorsprong.org/websamples.countryinfo\">\n    </ListOfCurrenciesByName>\n  </soap12:Body>\n</soap12:Envelope>"
						},
						"url": {
							"raw": "http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso",
							"protocol": "http",
							"host": [
								"webservices",
								"oorsprong",
								"org"
							],
							"path": [
								"websamples.countryinfo",
								"CountryInfoService.wso"
							]
						},
						"description": "Returns a list of currencies ordered by name."
					},
					"response": []
				}
			],
			"description": "Returns a list of currencies ordered by name.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Languages",
			"item": [
				{
					"name": "List of Languages by Name",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <ListOfLanguagesByName xmlns=\"http://www.oorsprong.org/websamples.countryinfo\">\n    </ListOfLanguagesByName>\n  </soap:Body>\n</soap:Envelope>"
						},
						"url": {
							"raw": "http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso",
							"protocol": "http",
							"host": [
								"webservices",
								"oorsprong",
								"org"
							],
							"path": [
								"websamples.countryinfo",
								"CountryInfoService.wso"
							]
						},
						"description": "Returns an array of languages ordered by name."
					},
					"response": []
				}
			],
			"description": "SOAP APIs for languages around the world.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Book ISBN Numbers",
			"item": [
				{
					"name": "Is Valid ISBN13 Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1.проверка статуса риспонса",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2.проверка заголовка Content-Type",
									"pm.test(\"Content-Type contains 'xml'\", function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.match(/xml/);",
									"});",
									"",
									"// 3.проверка времени ответа",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"//4.проверяем наличие заголовка SOAPAction",
									"pm.test(\"SOAPAction header is present\", function () {",
									"    const soapActionHeader = pm.response.headers.get('SOAPAction');",
									"    pm.expect(soapActionHeader, 'SOAPAction header is missing').to.not.be.null;",
									"});",
									"",
									"// 5.проверяем значение заголовка Content-Length",
									"pm.test(\"Content-Length header is present\", function () {",
									"    pm.response.to.have.header(\"Content-Length\");",
									"});",
									"",
									"//6.проверка наличия валидного XML в ответе",
									"pm.test(\"Response is valid XML\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/xml');",
									"});",
									"",
									"//7.проверка наличия XML-тегов в ответе",
									"pm.test(\"Response contains XML tags\", function () {",
									"  const responseText = pm.response.text();",
									"  pm.expect(responseText).to.include('<').and.to.include('>');",
									"});",
									"",
									"//8.проверка значения в поле IsValidISBN13Result",
									"pm.test(\"IsValidISBN13Result is 'true' or 'false'\", function () {",
									"    const responseData = xml2Json(pm.response.text());",
									"    const result = responseData?.['soap:Envelope']?.['soap:Body']?.['m:IsValidISBN13Response']?.['m:IsValidISBN13Result'];",
									"",
									"    pm.expect(result).to.be.oneOf([\"true\", \"false\"]);",
									"});",
									"",
									"//9.проверка наличия namespace в поле ответа",
									"pm.test(\"Namespace is present in response\", function () {",
									"    var responseXml = pm.response.text();",
									"    pm.expect(responseXml).to.include('xmlns:m=\"http://webservices.daehosting.com/ISBN\"');",
									"});",
									"",
									"//10.проверка, является ли результат метода IsValidISBN13 непустой строкой",
									"pm.test(\"IsValidISBN13Result is a non-empty string\", function () {",
									"  const responseData = xml2Json(pm.response.text());",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData['soap:Envelope']['soap:Body']['m:IsValidISBN13Response']['m:IsValidISBN13Result']).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <IsValidISBN13 xmlns=\"http://webservices.daehosting.com/ISBN\">\n      <sISBN>978-1-4612-9090-2</sISBN>\n    </IsValidISBN13>\n  </soap:Body>\n</soap:Envelope>"
						},
						"url": {
							"raw": "http://webservices.daehosting.com/services/isbnservice.wso",
							"protocol": "http",
							"host": [
								"webservices",
								"daehosting",
								"com"
							],
							"path": [
								"services",
								"isbnservice.wso"
							]
						},
						"description": "The test is done by calculation on the first 12 digits and compare the result with the checksum number at the end. You have to pass a 13 digits number."
					},
					"response": []
				},
				{
					"name": "Is Valid ISBN10 Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1.Проверяем статус код ",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2.проверяем тайминг ответа",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"//3.наличие обязательных полей риспонса",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = xml2Json(pm.response.text());",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData['soap:Envelope']).to.exist;",
									"    pm.expect(responseData['soap:Envelope']['soap:Body']).to.exist;",
									"    pm.expect(responseData['soap:Envelope']['soap:Body']['m:IsValidISBN10Response']).to.exist;",
									"    pm.expect(responseData['soap:Envelope']['soap:Body']['m:IsValidISBN10Response']['m:IsValidISBN10Result']).to.exist;",
									"});",
									"",
									"//4.Content type",
									"pm.test(\"Content type is 'text/xml'\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/xml\");",
									"});",
									"",
									"//5.чекаем формат IsValidISBN10Resul",
									"pm.test(\"Validate the format of m:IsValidISBN10Result\", function () {",
									"    const responseData = xml2Json(pm.response.text());",
									"    ",
									"    pm.expect(responseData).to.have.property('soap:Envelope');",
									"    pm.expect(responseData['soap:Envelope']).to.have.property('soap:Body');",
									"    pm.expect(responseData['soap:Envelope']['soap:Body']).to.have.property('m:IsValidISBN10Response');",
									"    pm.expect(responseData['soap:Envelope']['soap:Body']['m:IsValidISBN10Response']).to.have.property('m:IsValidISBN10Result');",
									"});",
									"",
									"//6.проверка присутствия элемента soap:Envelope",
									"pm.test(\"Presence of soap:Envelope element in the response\", function () {",
									"    const responseData = xml2Json(pm.response.text());",
									"    ",
									"    pm.expect(responseData).to.have.property(\"soap:Envelope\");",
									"});",
									"",
									"//7.проверка наличия элемента soap:Body",
									"pm.test(\"Soap:Body element is present in the response\", function () {",
									"    const responseData = xml2Json(pm.response.text());",
									"    ",
									"    pm.expect(responseData['soap:Envelope']['soap:Body']).to.exist;",
									"});",
									"",
									"//8.проверка наличия элемента IsValidISBN10Response",
									"pm.test(\"Ensure that the m:IsValidISBN10Response element exists\", function () {",
									"    const responseData = xml2Json(pm.response.text());",
									"    ",
									"    pm.expect(responseData).to.have.property(\"soap:Envelope\");",
									"    pm.expect(responseData[\"soap:Envelope\"]).to.have.property(\"soap:Body\");",
									"    pm.expect(responseData[\"soap:Envelope\"][\"soap:Body\"]).to.have.property(\"m:IsValidISBN10Response\");",
									"});",
									"",
									"//9.проверка наличия элемента IsValidISBN10Result",
									"pm.test(\"Presence of m:IsValidISBN10Result element in the response\", function () {",
									"    const responseData = xml2Json(pm.response.text());",
									"    ",
									"    pm.expect(responseData).to.have.property('soap:Envelope')",
									"        .that.has.property('soap:Body')",
									"        .that.has.property('m:IsValidISBN10Response')",
									"        .that.has.property('m:IsValidISBN10Result');",
									"});",
									"",
									"//10.проверка ответа в соответствии с schema",
									"pm.test(\"Validate the response against a schema\", function () {",
									"    const responseData = xml2Json(pm.response.text());",
									"    ",
									"    pm.expect(responseData).to.have.property('soap:Envelope');",
									"    pm.expect(responseData['soap:Envelope']).to.have.property('soap:Body');",
									"    pm.expect(responseData['soap:Envelope']['soap:Body']).to.have.property('m:IsValidISBN10Response');",
									"    pm.expect(responseData['soap:Envelope']['soap:Body']['m:IsValidISBN10Response']).to.have.property('m:IsValidISBN10Result');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    <IsValidISBN10 xmlns=\"http://webservices.daehosting.com/ISBN\">\n      <sISBN>0-19-852663-6</sISBN>\n    </IsValidISBN10>\n  </soap:Body>\n</soap:Envelope>"
						},
						"url": {
							"raw": "http://webservices.daehosting.com/services/isbnservice.wso",
							"protocol": "http",
							"host": [
								"webservices",
								"daehosting",
								"com"
							],
							"path": [
								"services",
								"isbnservice.wso"
							]
						},
						"description": "The test is done by calculation on the first 9 digits and compare the result with the checksum number at the end. You have to pass a 10 digits number or 8 digits and an X."
					},
					"response": []
				}
			],
			"description": "SOAP APIs for book ISBN numbers.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Temperature",
			"item": [
				{
					"name": "Celsius to Farenheit Conversion",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/soap+xml; charset=utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <CelsiusToFahrenheit xmlns=\"https://www.w3schools.com/xml/\">\n      <Celsius>20</Celsius>\n    </CelsiusToFahrenheit>\n  </soap12:Body>\n</soap12:Envelope>"
						},
						"url": {
							"raw": "https://www.w3schools.com/xml/tempconvert.asmx",
							"protocol": "https",
							"host": [
								"www",
								"w3schools",
								"com"
							],
							"path": [
								"xml",
								"tempconvert.asmx"
							]
						},
						"description": "Converts celsius temperature to farenheit."
					},
					"response": []
				},
				{
					"name": "Farenheit to Celsius Conversion",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/soap+xml; charset=utf-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n  <soap12:Body>\n    <FahrenheitToCelsius xmlns=\"https://www.w3schools.com/xml/\">\n      <Fahrenheit>75</Fahrenheit>\n    </FahrenheitToCelsius>\n  </soap12:Body>\n</soap12:Envelope>"
						},
						"url": {
							"raw": "https://www.w3schools.com/xml/tempconvert.asmx",
							"protocol": "https",
							"host": [
								"www",
								"w3schools",
								"com"
							],
							"path": [
								"xml",
								"tempconvert.asmx"
							]
						},
						"description": "Converts farenheit temperature to celsius."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}